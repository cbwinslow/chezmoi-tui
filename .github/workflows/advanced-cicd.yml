name: Advanced CI/CD with Chezmoi Secrets

on:
  push:
    branches: [main, master, develop]
    tags: ['v*']
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security scan job to ensure code quality
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Test job that runs on all branches
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.21.x, 1.22.x, 1.23.x]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Verify Go version
      run: go version

    - name: Get dependencies
      run: go mod download

    - name: Build
      run: go build -v ./...

    - name: Run tests
      run: go test -v -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Lint job to ensure code quality
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  # Build job that only runs on main branch or tagged releases
  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          # Windows ARM64 is not commonly used
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x

    - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
      run: |
        mkdir -p dist
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build -o dist/chezmoi-tui-${{ matrix.goos }}-${{ matrix.goarch }} .
      env:
        CGO_ENABLED: 0

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/chezmoi-tui-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  # Release job that runs only on tagged commits
  release:
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release directory
      run: |
        mkdir -p release
        find . -name "binary-*" -type d -exec cp {}/*.exe release/ \; 2>/dev/null || true
        find . -name "binary-*" -type d -exec cp {}/* release/ \; 2>/dev/null || true

    - name: Generate checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cd ..

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/*
        generate_release_notes: true

  # Docker build and push job (only for main branch and tags)
  docker:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deployment job (only runs for main branch)
  deploy-staging:
    needs: [test, lint, docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: staging
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "This would normally deploy the Docker image built in the previous step"
        # In a real scenario, this would deploy to a staging environment
        # using the secrets defined in the GitHub environment

  # Production deployment job (requires manual approval)
  deploy-production:
    needs: [test, lint, docker, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "This would normally deploy the Docker image built in the previous step"
        # In a real scenario, this would deploy to production
        # using production-specific secrets